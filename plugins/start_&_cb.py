import random
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from helper.database import jishubotz
from config import Config, Txt  

# -------------------- Button Layouts --------------------

START_BUTTON = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìö  ú·¥á ü·¥ò", callback_data="help"),
     InlineKeyboardButton("‚ÑπÔ∏è ·¥Ä ô·¥è·¥ú·¥õ", callback_data="about")],
    [InlineKeyboardButton("üë§ ·¥ò Ä·¥èÍú∞…™ ü·¥á", callback_data="profile"),
     InlineKeyboardButton("‚öôÔ∏è Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±", callback_data="settings")],
    [InlineKeyboardButton("üë®‚Äçüíª ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url="https://telegram.me/TechifyRahul")],
    [InlineKeyboardButton("‚ùå ·¥Ñ ü·¥èÍú±·¥á", callback_data="close")]
])

HELP_BUTTON = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìù ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä", callback_data="meta")],
    [InlineKeyboardButton("üî§ ·¥ò Ä·¥áÍú∞…™x", callback_data="prefix"),
     InlineKeyboardButton("üîö Íú±·¥úÍú∞Íú∞…™x", callback_data="suffix")],
    [InlineKeyboardButton("üñºÔ∏è ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü", callback_data="thumbnail"),
     InlineKeyboardButton("üìù ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥", callback_data="caption")],
    [InlineKeyboardButton("üè†  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="start")]
])

ABOUT_BUTTON = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìÇ …¢…™·¥õ ú·¥ú ô", url="https://github.com/TechifyBots"),
     InlineKeyboardButton("üí∏ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á", callback_data="donate")],
    [InlineKeyboardButton("üè†  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ú·¥è·¥ç·¥á", callback_data="start")]
])

BACK_CLOSE = InlineKeyboardMarkup([
    [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="help"),
     InlineKeyboardButton("‚ùå ·¥Ñ ü·¥èÍú±·¥á", callback_data="close")]
])

# -------------------- Start Command --------------------

@Client.on_message(filters.private & filters.command("start"))
async def start(client, message):
    user = message.from_user
    await jishubotz.add_user(client, message)                
    if Config.START_PIC:
        await message.reply_photo(
            Config.START_PIC,
            caption=Txt.START_TXT.format(user.mention),
            reply_markup=START_BUTTON
        )       
    else:
        await message.reply_text(
            text=Txt.START_TXT.format(user.mention),
            reply_markup=START_BUTTON,
            disable_web_page_preview=True
        )

# -------------------- Callback Query Handler --------------------

@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data 

    if data == "start":
        await query.message.edit_text(
            text=Txt.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup=START_BUTTON
        )

    elif data == "help":
        await query.message.edit_text(
            text=Txt.HELP_TXT,
            disable_web_page_preview=True,
            reply_markup=HELP_BUTTON
        )

    elif data == "about":
        await query.message.edit_text(
            text=Txt.ABOUT_TXT,
            disable_web_page_preview=True,
            reply_markup=ABOUT_BUTTON
        )

    elif data == "donate":
        await query.message.edit_text(
            text=Txt.DONATE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ü§ñ ·¥ç·¥è Ä·¥á  ô·¥è·¥õs", url="https://telegram.me/TechifyBots/8")],
                [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="about"),
                 InlineKeyboardButton("‚ùå ·¥Ñ ü·¥èÍú±·¥á", callback_data="close")]
            ])
        )

    elif data == "meta":
        await query.message.edit_caption(
            caption=Txt.SEND_METADATA,
            reply_markup=BACK_CLOSE
        )

    elif data == "prefix":
        await query.message.edit_caption(
            caption=Txt.PREFIX,
            reply_markup=BACK_CLOSE
        )

    elif data == "suffix":
        await query.message.edit_caption(
            caption=Txt.SUFFIX,
            reply_markup=BACK_CLOSE
        )

    elif data == "caption":
        await query.message.edit_caption(
            caption=Txt.CAPTION_TXT,
            reply_markup=BACK_CLOSE
        )

    elif data == "thumbnail":
        await query.message.edit_caption(
            caption=Txt.THUMBNAIL_TXT,
            reply_markup=BACK_CLOSE
        )

    elif data == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
            await query.message.continue_propagation()
        except:
            await query.message.delete()
            await query.message.continue_propagation()

    elif data.startswith("sendAlert"):
        user_id = int(data.split("_")[1].strip())
        reason = str(data.split("_")[2])
        try:
            await client.send_message(user_id , f"<b> è·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö  ô è [ Ä·¥Ä ú·¥ú ü](https://telegram.me/callownerbot)\n Ä·¥á·¥Äs·¥è…¥ : {reason}</b>")
            await query.message.edit(f"<b>A ü·¥á Ä·¥õ s·¥á…¥·¥õ ·¥õ·¥è <code>{user_id}</code>\n Ä·¥á·¥Äs·¥è…¥ : {reason}</b>")
        except Exception as e:
            await query.message.edit(f"<b>s Ä è …™ …¢·¥è·¥õ ·¥õ ú…™s ·¥á Ä Ä·¥è Ä : {e}</b>")

    elif data.startswith('noAlert'):
        user_id = int(data.split("_")[1].strip())
        await query.message.edit(f"<b>T ú·¥á  ô·¥Ä…¥ ·¥è…¥ <code>{user_id}</code> ·¥°·¥Äs ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è.</b>")

    elif data.startswith('sendUnbanAlert'):
        user_id = int(data.split("_")[1].strip())
        try:
            unban_text = "<b> ú·¥ú Ä Ä·¥Ä è.. è·¥è·¥ú ·¥Ä Ä·¥á ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö  ô è [ Ä·¥Ä ú·¥ú ü](https://telegram.me/callownerbot)</b>"
            await client.send_message(user_id , unban_text)
            await query.message.edit(f"<b>U…¥ ô·¥Ä…¥…¥·¥á·¥Ö A ü·¥á Ä·¥õ s·¥á…¥·¥õ ·¥õ·¥è <code>{user_id}</code>\n·¥Ä ü·¥á Ä·¥õ ·¥õ·¥áx·¥õ : {unban_text}</b>")
        except Exception as e:
            await query.message.edit(f"<b>s Ä è …™ …¢·¥è·¥õ ·¥õ ú…™s ·¥á Ä Ä·¥è Ä : {e}</b>")

    elif data.startswith('NoUnbanAlert'):
        user_id = int(data.split("_")[1].strip())
        await query.message.edit(f"T ú·¥á ·¥ú…¥ ô·¥Ä…¥ ·¥è…¥ <code>{user_id}</code> ·¥°·¥Äs ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è.")