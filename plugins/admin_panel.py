from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from config import Config
from helper.database import jishubotz
import time, os, asyncio

ADMIN_ID = Config.OWNER_ID

@Client.on_message(filters.private & filters.command("admin") & filters.user(ADMIN_ID))
async def admin_panel(client: Client, message: Message):
    total_users = await jishubotz.total_users_count()
    await message.reply_text(
        f"**üëë ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤**\n\n"
        f"‚Ä¢ ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: `{total_users}` ‡¶ú‡¶®\n"
        f"‚Ä¢ ‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ‚úÖ ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®\n\n"
        f"‡¶®‡ßÄ‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßÅ‡¶≤‡¶∏ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ", callback_data="users"),
             InlineKeyboardButton("üì∂ ‡¶™‡¶ø‡¶Ç", callback_data="ping")],
            [InlineKeyboardButton("‚ôªÔ∏è ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü", callback_data="restart")],
            [InlineKeyboardButton("üì¢ ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü", callback_data="broadcast")],
            [InlineKeyboardButton("‚õî ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®", callback_data="ban_user"),
             InlineKeyboardButton("‚úÖ ‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶®", callback_data="unban_user")],
        ])
    )


# Callback Functions
@Client.on_callback_query(filters.regex("users") & filters.user(ADMIN_ID))
async def total_users_cb(client, callback_query: CallbackQuery):
    total = await jishubotz.total_users_count()
    await callback_query.answer(f"‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {total}", show_alert=True)

@Client.on_callback_query(filters.regex("ping") & filters.user(ADMIN_ID))
async def ping_cb(client, callback_query: CallbackQuery):
    start = time.time()
    msg = await callback_query.message.reply("‡¶™‡¶ø‡¶Ç ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    end = time.time()
    await msg.edit(f"üèì ‡¶™‡¶Ç! `{round((end-start)*1000)}ms`")

@Client.on_callback_query(filters.regex("restart") & filters.user(ADMIN_ID))
async def restart_cb(client, callback_query: CallbackQuery):
    await callback_query.message.edit("‚ôªÔ∏è ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")
    await asyncio.sleep(2)
    os.execl(sys.executable, sys.executable, *sys.argv)


# Broadcast handler (manual command based)
@Client.on_message(filters.private & filters.command("broadcast") & filters.user(ADMIN_ID))
async def broadcast_msg(client, message: Message):
    if len(message.command) < 2:
        return await message.reply("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n`/broadcast ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞_‡¶Æ‡ßá‡¶∏‡ßá‡¶ú`")
    
    text = message.text.split(None, 1)[1]
    total = 0
    failed = 0

    async for user in jishubotz.get_all_users():
        try:
            await client.send_message(user['_id'], text)
            total += 1
        except:
            failed += 1
    
    await message.reply(f"‚úÖ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá: {total}\n‚ùå ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá: {failed}")


# Ban/unban command based
@Client.on_message(filters.private & filters.command("ban") & filters.user(ADMIN_ID))
async def ban_user_cmd(client, message: Message):
    if len(message.command) != 2:
        return await message.reply("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n`/ban ‡¶á‡¶â‡¶ú‡¶æ‡¶∞_‡¶Ü‡¶á‡¶°‡¶ø`")
    user_id = int(message.command[1])
    done = await jishubotz.ban_user(user_id)
    if done:
        await message.reply(f"‚õî `{user_id}` ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    else:
        await message.reply("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶§‡ßã‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶°‡•§")

@Client.on_message(filters.private & filters.command("unban") & filters.user(ADMIN_ID))
async def unban_user_cmd(client, message: Message):
    if len(message.command) != 2:
        return await message.reply("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n`/unban ‡¶á‡¶â‡¶ú‡¶æ‡¶∞_‡¶Ü‡¶á‡¶°‡¶ø`")
    user_id = int(message.command[1])
    done = await jishubotz.is_unbanned(user_id)
    if done:
        await message.reply(f"‚úÖ `{user_id}` ‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    else:
        await message.reply("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶° ‡¶õ‡¶ø‡¶≤ ‡¶®‡¶æ‡•§")