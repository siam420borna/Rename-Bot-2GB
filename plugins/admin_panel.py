import os, sys, time, asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import Config
from helper.database import jishubotz

@Client.on_message(filters.command("admin") & filters.user(Config.ADMIN))
async def admin_panel(_, m: Message):
    buttons = [
        [
            InlineKeyboardButton("üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏", callback_data="status"),
            InlineKeyboardButton("üîÅ ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü", callback_data="restart"),
        ],
        [
            InlineKeyboardButton("üì£ ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü", callback_data="broadcast"),
            InlineKeyboardButton("üèÜ ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ", callback_data="premium_menu"),
        ],
    ]
    await m.reply("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤", reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.user(Config.ADMIN))
async def admin_cb_handler(_, query: CallbackQuery):
    data = query.data

    if data == "status":
        total_users = await jishubotz.total_users_count()
        uptime = time.strftime("%Hh%Mm%Ss", time.gmtime(time.time() - _.uptime))
        await query.message.edit(
            f"**--‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏--**\n\n‚åö **‡¶Ü‡¶™‡¶ü‡¶æ‡¶á‡¶Æ:** `{uptime}`\nüë• **‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞:** `{total_users}`"
        )

    elif data == "restart":
        await query.message.edit("‚ôªÔ∏è ‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        await asyncio.sleep(2)
        os.execl(sys.executable, sys.executable, *sys.argv)

    elif data == "broadcast":
        await query.message.edit("‚úâÔ∏è ‡¶Ø‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì, ‡¶∏‡ßá‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶æ‡¶ì ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞‡ßá‡•§")

    elif data == "premium_menu":
        buttons = [
            [
                InlineKeyboardButton("‚ûï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ", callback_data="add_premium"),
                InlineKeyboardButton("‚ûñ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ", callback_data="del_premium"),
            ]
        ]
        await query.message.edit("**‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤**", reply_markup=InlineKeyboardMarkup(buttons))

    await query.answer()

@Client.on_callback_query(filters.regex("add_premium") & filters.user(Config.ADMIN))
async def ask_add_premium(_, query: CallbackQuery):
    await query.message.edit("‚ûï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§ /addpremium user_id")

@Client.on_callback_query(filters.regex("del_premium") & filters.user(Config.ADMIN))
async def ask_del_premium(_, query: CallbackQuery):
    await query.message.edit("‚ûñ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§ /delpremium user_id")